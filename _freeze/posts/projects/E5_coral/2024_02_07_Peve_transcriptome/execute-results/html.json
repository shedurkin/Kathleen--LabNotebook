{
  "hash": "6a1125203d2df151162b5877b2844256",
  "result": {
    "markdown": "---\ntitle: \"Generating a genes fasta for P. evermanni\"\nauthor: \"Kathleen Durkin\"\ndate: \"2024-02-07\"\ncategories: [\"E5-coral\"]\nformat:\n  html:\n    toc: true\nengine: knitr\n---\n\n\nIn the process of running [kallisto on the three E5 deep dive species](2024_02_06_RNAseq_kallisto.qmd), we realized that there's no transcriptome FASTA available for *P. evermanni*. That means we need to generate one!\n\n[Rendered code](https://github.com/urol-e5/deep-dive/blob/main/E-Peve/code/12-Peve-RNAseq-kallisto.md)\n\n[Related posts:]{.underline}\\\n[RNAseq abundance quantification (A.Pulchra, P.evermanni, P.meandrina)](\\posts\\projects\\E5_coral\\2024_02_06_RNAseq_kallisto.qmd)\\\n[P.evermanni RNAseq kallisto debugging](\\posts\\projects\\E5_coral\\2024_01_31_Peve_kallisto.qmd)\\\n[Testing bedtools: gff vs bed input file](\\posts\\projects\\misc\\2024_02_08_bedtools_gffvbed.qmd)\n\n### Starter files\n\nThe closest file to a *P. evermanni* transcriptome that we have is a *P.evermanni* coding sequence (CDS) gff file, and a corresponding genome scaffolds FASTA.\n\nhead of gff:\n\n```         \nPorites_evermani_scaffold_1 Gmove mRNA 3107 4488 543 - . ID=Peve_00000001;Name=Peve_00000001;start=0;stop=1;cds_size=543 Porites_evermani_scaffold_1 Gmove CDS 3107 3444 . - . Parent=Peve_00000001 \nPorites_evermani_scaffold_1 Gmove CDS 4284 4488 . - . Parent=Peve_00000001\n```\n\nA gff file lists information that can be used to identify and retrieve specific sequences. The first column lists the region or scaffold of a reference genome in which the sequence can be found; the third identifies which genomic feature (e.g., mRNA, CDS, UTR) the sequence is; and the fourth and fifth are genomic coordinates for the beginning and end of the sequence. Since we have both the coding sequences gff and a reference fasta, we should be able to extract FASTA sequences for all of the relevant sequences in the gff!\n\n### Extract CDS sequences\n\nFirst, it looks like the gff has features labelled a little weirdly. Normally we'd want all of the mRNA sequences, but it looks like this file lists mRNA sequences that include introns. Instead, we want all of the CDS sequences associated with each mRNA (association is denoted in the final column with a parent mRNA ID, e.g. \"Parent=Peve_00000001\"). That means the first step is to extract all of the CDS sequences from our gff file.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Extract only the CDS sequence lines from the gff\ngrep -w 'CDS' ${transcriptome_gff} > ${transcriptome_gff_filtered}\n\nhead -n 5 ${transcriptome_gff_filtered}\n```\n:::\n\n\n```         \nPorites_evermani_scaffold_1 Gmove   CDS 3107    3444    .   -   .   Parent=Peve_00000001\nPorites_evermani_scaffold_1 Gmove   CDS 4284    4488    .   -   .   Parent=Peve_00000001\nPorites_evermani_scaffold_1 Gmove   CDS 424479  425361  .   -   .   Parent=Peve_00000002\nPorites_evermani_scaffold_1 Gmove   CDS 426181  426735  .   -   .   Parent=Peve_00000002\nPorites_evermani_scaffold_1 Gmove   CDS 427013  427140  .   -   .   Parent=Peve_00000002\n```\n\n### Convert gff to bed\n\nThen we convert this filtered CDS gff file to a bed file, which has slightly different formatting. We're doing this because we'll be using a tool called bedtools getfasta, which can take both gff and bed files, but which I trust more to appropriately parse bed files (though, see post on whether it can handle gff files correctly as well).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Ensure bedops can find its dependencies when running\nexport PATH=/home/shared/bedops_linux_x86_64-v2.4.41/bin:$PATH\n\n${bedops}/gff2bed \\\n--do-not-sort \\\n< ${transcriptome_gff_filtered} \\\n> ${transcriptome_bed}\n\nhead -n 3 ${transcriptome_gff_filtered}\necho \"\"\nhead -n 3 ${transcriptome_bed}\n```\n:::\n\n\n```         \nPorites_evermani_scaffold_1 Gmove   CDS 3107    3444    .   -   .   Parent=Peve_00000001\nPorites_evermani_scaffold_1 Gmove   CDS 4284    4488    .   -   .   Parent=Peve_00000001\nPorites_evermani_scaffold_1 Gmove   CDS 424479  425361  .   -   .   Parent=Peve_00000002\n\nPorites_evermani_scaffold_1 3106    3444    .   .   -   Gmove   CDS .   Parent=Peve_00000001\nPorites_evermani_scaffold_1 4283    4488    .   .   -   Gmove   CDS .   Parent=Peve_00000001\nPorites_evermani_scaffold_1 424478  425361  .   .   -   Gmove   CDS .   Parent=Peve_00000002\n```\n\n### Generating a transcriptome FASTA\n\nThe basic approach to generating this transcriptome makes use of the fact that each CDS sequence in our bed file is assigned a \"parent\" mRNA, denoted by a parent Id in the last column (e.g., \"Parent=Peve_00000001\"). Each sequence with the same parent ID should be used to a) retrieve a FASTA for that sequence, and b) concatenate all of the FASTAs with the same parent ID into a single, labelled gene FASTA. The below code will iterate through our entire bed file and do this for each parent ID and its associated sequences.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Load bash variables into memory\nsource .bashvars\n\n# Navigate to correct directory and make output file\ncd ${transcriptome_dir}\necho > ${transcriptome_fasta_name}\n\n# Helper list for processing all parent IDs\nprocessed_ids=()\n\n######################################################\n\n# Helper function to concatenate and format several bedtools output sequences \n# into a single, appropriately named contig\nconcatenate_helper() {\n    local input_bedtools_fastas=\"$1\"\n    local parent_ID=\"$2\"\n    local reference_name=\"\"\n    local positions=\"\"\n    local concatenated_sequences=\"\"\n\n    # Read the input line by line\n    while IFS= read -r line; do\n        # Check if the line starts with \">\"\n        if [[ \"$line\" == \">\"* ]]; then\n            # Extract reference name and position from the line\n            reference_position=\"${line:1}\"  # Remove \">\"\n            reference_name=$(echo \"$reference_position\" | cut -d: -f1)\n            position=$(echo \"$reference_position\" | cut -d: -f2)\n\n            # Append position to the positions variable\n            positions+=\"$position,\"\n        else\n            # Concatenate sequences\n            concatenated_sequences+=\"$line\"\n        fi\n    done <<< \"$input_bedtools_fastas\"\n\n    # Remove trailing comma from positions\n    positions=\"${positions%,}\"\n\n    # Output the reformatted result\n    echo \">$parent_ID $reference_name:$positions\"\n    echo \"$concatenated_sequences\"\n}\n\n######################################################\n\n# Process your input bed file\nwhile IFS= read -r line; do\n\n    # pull the parent ID number for the current line of the bed\n    parentID=$(echo \"$line\" | grep -o 'Parent=Peve_[0-9]\\+')\n    \n    # Only continue if you haven't already processed the CDS sequences associated with this parent ID\n    if [[ ! \" ${processed_ids[@]} \" =~ \" $parentID \" ]]; then\n \n        # Add the current parentID to the processed list\n        processed_ids+=(\"$parentID\")\n\n        # Create temporary files to store intermediate results\n        temp_CDS_bed_file=$(mktemp)\n        temp_bedtools_fasta_file=$(mktemp)\n\n        # Grab all of the CDS sequences with the same parent ID and write to temporary file\n        grep \"$parentID\" ${transcriptome_bed} > \"$temp_CDS_bed_file\"\n\n        # Use bedtools to extract corresponding FASTAs and write to temporary file\n        ${programs_array[bedtools]} getfasta -fi ${genome_fasta} -bed \"$temp_CDS_bed_file\" -fo \"$temp_bedtools_fasta_file\"\n\n        # Use our helper function to concatenate and format all of these CDS fastas into a single contig\n        concatenated_fasta=$(concatenate_helper \"$(cat \"$temp_bedtools_fasta_file\")\" \"$parentID\")\n \n        # Add the concatenated CDS fasta to our output file on a new line\n        echo \"$concatenated_fasta\" >> ${transcriptome_fasta}\n\n        # Remove the temporary files\n        rm \"$temp_CDS_bed_file\" \"$temp_bedtools_fasta_file\"\n    fi\ndone < ${transcriptome_bed}\n\n# The output file ends up having a blank first line before the data, so delete that unwanted empty first line\nsed -i '1{/^$/d}' ${transcriptome_fasta}\n```\n:::\n\n\nNow we have a transcriptome FASTA the can be used for kallisto abundance quantification!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}