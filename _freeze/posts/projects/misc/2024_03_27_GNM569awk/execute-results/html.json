{
  "hash": "8f2c4a5a38e450534acd171568e4374a",
  "result": {
    "markdown": "---\ntitle: \"Learning awk for GNM569\"\nauthor: \"Kathleen Durkin\"\ndate: \"2024-03-27\"\ncategories: [\"misc\"]\nformat:\n  html:\n    toc: true\nengine: knitr\n---\n\n\nThis quarter I'm taking GENOME569, which covers developing bioinformatic workflows for high-throughput sequencing. Today we briefly covered some of the primaries of Unix, and I realized I've never learned awk or written awk commands fro scratch! These are some awk practice problems from the class to hopefully help me get up to speed.\\\n\n## Practice file:\n\ngrep_sed_example1.txt\n\n```         \nExperiment notes:\nWe are using the hg19 genome build\nThe cell line is A549\nA549 cells have a KRAS G12C mutation\nAnother cell line is MCF7\n```\n\n## grep\n\n### Find the lines that mention \"cell\":\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ grep \"cell\" grep_sed_example1.txt\n```\n:::\n\n\n```         \nThe cell line is A549\nA549 cells have a KRAS G12C mutation\nAnother cell line is MCF7\n```\n\n\"cell\": This is the regular expression pattern to match. It simply looks for the string \"cell\" within each line of the file.\n\n### Find the lines that talk about \"A549\":\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ grep \"A549\" grep_sed_example1.txt\n```\n:::\n\n\n```         \nThe cell line is A549\nA549 cells have a KRAS G12C mutation\n```\n\n\"A549\": This pattern matches the string \"A549\" within each line of the file.\n\n### Find the lines that talk about either A549 or MCF7:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ grep -E \"A549|MCF7\" grep_sed_example1.txt\n```\n:::\n\n\n```         \nThe cell line is A549\nA549 cells have a KRAS G12C mutation\nAnother cell line is MCF7\n```\n\n-E: Enables extended regular expressions, allowing the use of the \\| (OR) operator.\n\n\"A549\\|MCF7\": This pattern matches lines containing either \"A549\" or \"MCF7\".\n\n### Find the lines that end with a cell line id (i.e., A549 or MCF7):\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ grep -E \"A549$|MCF7$\" grep_sed_example1.txt\n```\n:::\n\n\n```         \nAnother cell line is MCF7\n```\n\n-E: Enables extended regular expressions, allowing the use of the \\$ anchor to match the end of a line and the use of the \\| (OR) operator\n\n\"A549\\$\\|MCF7\\$\": This pattern matches lines that end (\\$) with either \"A549\" or \"MCF7\".\n\n## sed\n\nNote that sed will not make a permanent edit to the original file unless you specifically instruct it to do so using the -i option. Default behavior is to just output the modified text to standard output.\n\n### Change instances of A549 to MCF7:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ sed 's/A549/MCF7/g' grep_sed_example1.txt\n```\n:::\n\n\n```         \nExperiment notes:\nWe are using the hg19 genome build\nThe cell line is MCF7\nMCF7 cells have a KRAS G12C mutation\nAnother cell line is MCF7\n```\n\ns: This is the substitute command in sed, which is used to perform substitutions.\n\n/A549/MCF7/: This is the substitution operation. It finds all occurrences of \"A549\" and replaces them with \"MCF7\".\n\ng: This is the global flag, which tells sed to perform the substitution globally within each line, not just the first occurrence.\n\n### Change only the second instance of A549 to A549_LUNG:\n\n### Change instances of A549 to MCF7, but without stating \"A549\":\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ sed 's/[A-Z][0-9]\\{3\\}/MCF7/g' grep_sed_example1.txt\n```\n:::\n\n\n```         \nExperiment notes:\nWe are using the hg19 genome build\nThe cell line is MCF7\nMCF7 cells have a KRAS G12C mutation\nAnother cell line is MCF7\n```\n\n\\[A-Z\\]: Matches any uppercase letter from A to Z.\n\n\\[0-9\\]: Matches any digit from 0 to 9.\n\n\\\\{3\\\\}: Specifies that the previous pattern (digit) should occur exactly three times.\n\n/MCF7/: Replaces the matched pattern with \"MCF7\".\n\ng: This flag is used for global substitution, ensuring all occurrences within each line are replaced.\n\n### How can I make multiple changes in a single line?\n\n-e: This option allows you to specify multiple sed commands in one line. Each -e flag indicates the beginning of a new sed command.\n\nThen you can just sequentially use the expressions you want to apply!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}